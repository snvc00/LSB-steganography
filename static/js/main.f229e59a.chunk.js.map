{"version":3,"sources":["components/ImageUpload.jsx","components/EncodeMessage.jsx","components/DecodeMessage.jsx","components/DisclaimerNotification.jsx","App.jsx","index.js"],"names":["ImageUpload","props","inputRef","createRef","useState","iconName","setIconName","messageColor","setMessageColor","message","setMessage","Segment","placeholder","className","Message","icon","color","header","Button","labelPosition","Icon","name","content","onClick","current","click","primary","ref","type","accept","hidden","onChange","event","file","target","files","handleImageChange","EncodeMessage","downloadIcon","Header","as","encodeStatus","loading","isLoading","Content","Form","Input","size","value","handleMessageChange","downloadEncodedImage","DecodeMessage","decodeStatus","findHiddenMessage","DisclaimerNotification","href","App","state","image","setState","msg","imageType","length","setInvalidMessageException","formData","FormData","append","axios","post","then","response","link","document","createElement","download","process","window","location","reload","catch","error","handleRequestError","setMissingImageException","data","decodedMessage","exceptionTarget","updatedState","toString","unlockIcon","this","Grid","columns","relaxed","stackable","Column","textAlign","width","Divider","vertical","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f229e59a.chunk.js","sourcesContent":["import React, { useState, createRef } from 'react';\r\nimport { Segment, Button, Icon, Message } from 'semantic-ui-react';\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n  const inputRef = createRef();\r\n  const [ iconName, setIconName ] = useState('images outline');\r\n  const [ messageColor, setMessageColor ] = useState('grey');\r\n  const [ message, setMessage ] = useState('.PNG or .JPG Image');\r\n\r\n  const handleChange = event => {\r\n    const file = event.target.files[0];\r\n    if (!file) {\r\n      setIconName('images outline');\r\n      setMessageColor('grey');\r\n      setMessage('.PNG or .JPG Image');\r\n      return;\r\n    }\r\n    props.handleImageChange(file);\r\n    setIconName('check');\r\n    setMessageColor('success');\r\n    setMessage('Image Uploaded');\r\n  }\r\n\r\n  return(\r\n    <Segment placeholder className='image-upload-container' >\r\n      <div className='input-image'>\r\n      <Message\r\n        icon={iconName}\r\n        color={messageColor}\r\n        header={message}\r\n      />\r\n      </div>\r\n       <Button\r\n        labelPosition='left'\r\n        icon={<Icon name='upload' />} \r\n        content='  Upload Image'\r\n        onClick={() => inputRef.current.click()}\r\n        primary\r\n      />\r\n      <input\r\n        ref={inputRef}\r\n        type=\"file\"\r\n        accept='image/*'\r\n        hidden\r\n        onChange={handleChange}\r\n      />\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;","import React from 'react';\r\nimport { Header, Form, Icon, Message } from 'semantic-ui-react';\r\nimport './EncodeMessage.css';\r\n\r\nconst EncodeMessage = props => {\r\n    const handleOnChangeMessage = event => {\r\n      const message = event.target.value;\r\n      props.handleMessageChange(message);\r\n    }\r\n\r\n    const handleDownloadClick = () => {\r\n      props.downloadEncodedImage();\r\n    }\r\n  \r\n    const downloadIcon = <Icon name='cloud download' />;\r\n\r\n    return(\r\n        <div>\r\n            <Header \r\n              as='h3' className='subtitle-header'\r\n              content='Encode a message into an image' \r\n            />\r\n            <Message \r\n              icon \r\n              color={props.encodeStatus.color}\r\n            >\r\n              <Icon \r\n                name={props.encodeStatus.icon}\r\n                loading={props.encodeStatus.isLoading}\r\n              />\r\n              <Message.Content>\r\n                <Message.Header className='msg-header'>{props.encodeStatus.header}</Message.Header>\r\n                {props.encodeStatus.message}\r\n              </Message.Content>\r\n            </Message>\r\n            <Form className='input-form'>\r\n              <Form.Input \r\n                placeholder='Message'\r\n                size='large' \r\n                onChange={handleOnChangeMessage}\r\n              />\r\n              <Form.Button \r\n                color='teal' size='large'\r\n                icon={downloadIcon} \r\n                content='  Encode Message'\r\n                className='download-button' \r\n                onClick={handleDownloadClick}\r\n              />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EncodeMessage;","import React from 'react';\r\nimport { Header, Button, Message, Icon } from 'semantic-ui-react';\r\nimport './DecodeMessage.css';\r\n\r\nconst DecodeMessage = props => {\r\n  const handleDecodeMessageOnClick = () => {\r\n    props.findHiddenMessage();\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <Header \r\n        as='h3' className='subtitle-header'\r\n        content='Decode a message inside an image'\r\n      />\r\n      <Message \r\n        icon \r\n        color={props.decodeStatus.color}\r\n      >\r\n        <Icon \r\n          name={props.decodeStatus.icon}\r\n          loading={props.decodeStatus.isLoading}\r\n        />\r\n        <Message.Content>\r\n          <Message.Header className='msg-header'>{props.decodeStatus.header}</Message.Header>\r\n          {props.decodeStatus.message}\r\n        </Message.Content>\r\n      </Message>\r\n      <Button \r\n        color='orange' size='large' \r\n        icon={props.icon} \r\n        content='  Decode Message'\r\n        className='decode-button'\r\n        onClick={handleDecodeMessageOnClick}  \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DecodeMessage;","import React from 'react';\r\nimport { Icon, Message } from 'semantic-ui-react';\r\nimport './DisclaimerNotification.css';\r\n\r\nconst DisclaimerNotification = () => {\r\n  return(\r\n    <div className='disclaimer-and-info-container'>\r\n      <Message \r\n        className='disclaimer'\r\n        icon \r\n        color='warning'\r\n      >\r\n        <Icon name='warning' />\r\n        <Message.Content>\r\n          <Message.Header className='msg-header'>Disclaimer</Message.Header>\r\n          This application does not have warranty, and does not host images,\r\n          all the uploaded images are deleted intantly. Created for educational\r\n          purposes.\r\n        </Message.Content>\r\n      </Message>\r\n      <Message \r\n        className='other-info'\r\n        icon \r\n        color='info'\r\n      >\r\n        <Icon name='github square' />\r\n        <Message.Content>\r\n          <Message.Header className='msg-header'>About</Message.Header>\r\n          Need to report some bugs? &nbsp; Want to contribute? &nbsp; \r\n          <a href=\"https://github.com/snvc00/lsb-steganography\">Checkout the repository</a>\r\n        </Message.Content>\r\n      </Message>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisclaimerNotification;","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Header, Icon, Segment, Grid, Divider } from 'semantic-ui-react';\r\nimport ImageUpload from './components/ImageUpload';\r\nimport EncodeMessage from './components/EncodeMessage';\r\nimport DecodeMessage from './components/DecodeMessage';\r\nimport DisclaimerNotification from './components/DisclaimerNotification';\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    image: null,\r\n    message: '',\r\n    encodeStatus: {\r\n      color: 'grey',\r\n      header: 'Hide Your Message',\r\n      message: 'Write a message and download your custom image.',\r\n      icon: 'info',\r\n      isLoading: false\r\n    },\r\n    decodeStatus: {\r\n      color: 'grey',\r\n      header: 'Find Your Message',\r\n      message: 'Try to find a message in the uploaded image.',\r\n      icon: 'search',\r\n      isLoading: false\r\n    },\r\n  };\r\n\r\n  handleImageChange = file => {\r\n    this.setState({\r\n      image: file\r\n    });\r\n  }\r\n\r\n  handleMessageChange = msg => {\r\n    this.setState({\r\n      message: msg\r\n    });\r\n  }\r\n\r\n  downloadEncodedImage = () => {\r\n    if (!this.state.image) {\r\n      this.setMissingImageException('encodeStatus');\r\n      return;\r\n    }\r\n\r\n    const imageType =  this.state.image.type || null;\r\n\r\n    if (imageType !== 'image/jpeg' && imageType !== 'image/png') {\r\n      this.setMissingImageException('encodeStatus');\r\n      return;\r\n    }\r\n\r\n    if (this.state.message.length < 1 || this.state.message.length > 128) {\r\n      this.setInvalidMessageException();\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      encodeStatus: {\r\n        color: 'info',\r\n        header: 'Loading',\r\n        message: 'We are hidding the message, please wait.',\r\n        icon: 'circle notched',\r\n        isLoading: true\r\n      }\r\n    });\r\n\r\n    const formData = new FormData();\r\n    formData.append('message', this.state.message);\r\n    formData.append('image', this.state.image);\r\n\r\n    axios.post('/encode', formData).then(response => {\r\n      var link = document.createElement('a');\r\n      link.download = 'encoded.png';\r\n      link.href = `${process.env.REACT_APP_NODE_SERVER}/encoded-image`;\r\n      link.target = '_blank';\r\n      link.click();\r\n      \r\n      this.setState({\r\n        encodeStatus: {\r\n          color: 'success',\r\n          header: 'Message Encoded',\r\n          message: 'Please download the image in the new tab.',\r\n          icon: 'lock',\r\n          isLoading: false\r\n        }\r\n      });\r\n      window.location.reload();\r\n    }).catch(error => {\r\n      this.handleRequestError('encodeStatus', error);\r\n    });\r\n  }\r\n\r\n  findHiddenMessage = () => {\r\n    if (!this.state.image) {\r\n      this.setMissingImageException('decodeStatus');\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      decodeStatus: {\r\n        color: 'info',\r\n        header: 'Loading',\r\n        message: 'We are finding the message, please wait.',\r\n        icon: 'circle notched',\r\n        isLoading: true\r\n      }\r\n    });\r\n\r\n    const formData = new FormData();\r\n    formData.append('image', this.state.image);\r\n\r\n    axios.post('/decode', formData).then(response => {\r\n      this.setState({\r\n        decodeStatus: {\r\n          color: 'success',\r\n          header: 'Message Decoded',\r\n          message: response.data.decodedMessage,\r\n          icon: 'unlock',\r\n          isLoading: false\r\n        }\r\n      });\r\n    }).catch(error => {\r\n      this.handleRequestError('decodeStatus', error);\r\n    });\r\n  }\r\n\r\n  setMissingImageException = exceptionTarget => {\r\n    var updatedState = this.state;\r\n    updatedState[exceptionTarget] = {\r\n      color: 'error',\r\n      header: 'Error',\r\n      message: 'Please, load a valid image first',\r\n      icon: 'x',\r\n      isLoading: false\r\n    }\r\n\r\n    this.setState(updatedState);\r\n  }\r\n\r\n  handleRequestError = (exceptionTarget, error) => {\r\n    var updatedState = this.state;\r\n    updatedState[exceptionTarget] = {\r\n      color: 'error',\r\n      header: 'Error',\r\n      message: error.toString() + ', please try again.',\r\n      icon: 'x',\r\n      isLoading: false\r\n    }\r\n\r\n    this.setState(updatedState);\r\n  }\r\n\r\n  setInvalidMessageException = () => {\r\n    this.setState({\r\n      encodeStatus: {\r\n        color: 'error',\r\n        header: 'Error',\r\n        message: 'Remember, the length of your message goes from 1 to 128 characters.',\r\n        icon: 'x',\r\n        isLoading: false\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const unlockIcon = <Icon name='unlock alternate' />;\r\n    return (\r\n      <div className='app' >\r\n        <Header \r\n          as='h2' icon={unlockIcon} \r\n          content='LSB Algorithm for Steganography' \r\n        />\r\n        <br/>\r\n        <Segment placeholder className='container-segment'>\r\n          <ImageUpload \r\n            handleImageChange={this.handleImageChange}\r\n          />\r\n          <Grid columns={3} relaxed='very' stackable>\r\n            <Grid.Column textAlign='center' width='7'>\r\n              <EncodeMessage \r\n                handleMessageChange={this.handleMessageChange}\r\n                downloadEncodedImage={this.downloadEncodedImage}\r\n                encodeStatus={this.state.encodeStatus}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width='2'>\r\n              <Divider vertical>Or</Divider>\r\n            </Grid.Column>\r\n            <Grid.Column textAlign='center' width='7'>\r\n              <DecodeMessage \r\n                icon={unlockIcon}\r\n                decodeStatus={this.state.decodeStatus}\r\n                findHiddenMessage={this.findHiddenMessage}\r\n              />\r\n            </Grid.Column>\r\n          </Grid>\r\n          <DisclaimerNotification />\r\n        </Segment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}